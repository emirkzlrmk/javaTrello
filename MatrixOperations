package com.intellica;

public class MatrixOperations {
	public static void main(String[] args) {
		MatrixProcess();
	}

	private static void MatrixProcess() {
		int[][] arrA = { { 3, -3, 5 }, { -4, 6, 4 }, { 7, 8, -1 } };
		int[][] arrB = { { 1, -3, 5 }, { 3, 6, -2 }, { -4, 7, -1 } };
		int[][] A1 = { { 0, 6, -3 }, { 5, 1, -1 } };
		int[][] B1 = { { 0, 3 }, { -2, 1 }, { 2, 4 }, { -4, 5 } };
		int[][] A2 = { { 0, 3, -4 }, { 1, -1, -3 } };
		int[][] B2 = { { 4, 3, 8 }, { -2, 6, 9 }, { 0, 7, 1, }, { 5, -3, -1 } };

		printArray(add(arrA, arrB));
		System.out.println(" ");
		mult(A1, B1);
		System.out.println("");
		mult(A2, B2);

	}

	public static int[][] mult(int[][] arr1, int[][] arr2) {
		int rows = arr1.length;
		int columns = arr1[0].length;
		int rowcol = arr2[0].length;
		int[][] result = new int[rows][rowcol];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < rowcol; j++) {
				for (int k = 0; k < columns; k++) {
					result[i][j] = arr1[i][k] * arr2[k][j];
					printArray(result);
					System.out.println(" ");
				}

			}
		}
		return result;
	}

	public static int[][] add(int[][] arr1, int[][] arr2) {
		int rows = arr1.length;
		int columns = arr1[0].length;
		int[][] result = new int[rows][columns];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				result[i][j] = arr1[i][j] + arr2[i][j];
			}
		}
		return result;
	}

	public static int[][] sub(int[][] arr1, int[][] arr2) {
		int rows = arr1.length;
		int columns = arr1[0].length;
		int[][] result = new int[rows][columns];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				result[i][j] = arr1[i][j] - arr2[i][j];
			}
		}
		return result;

	}

	public static void printArray(int[][] arr) {
		int rows = arr.length;
		int columns = arr[0].length;
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}
}

/**
4 -6 10 
-1 12 2 
3 15 -2 
 
0 0 0 
0 0 0 
 
-12 0 0 
0 0 0 
 
-6 0 0 
0 0 0 
 
-6 0 0 
0 0 0 
 
-6 6 0 
0 0 0 
 
-6 -12 0 
0 0 0 
 
-6 -12 0 
0 0 0 
 
-6 -12 0 
-2 0 0 
 
-6 -12 0 
-2 0 0 
 
-6 -12 0 
-2 15 0 
 
-6 -12 0 
-2 1 0 
 
-6 -12 0 
-2 -4 0 
 

0 0 0 
0 0 0 
 
-6 0 0 
0 0 0 
 
0 0 0 
0 0 0 
 
0 0 0 
0 0 0 
 
0 18 0 
0 0 0 
 
0 -28 0 
0 0 0 
 
0 -28 0 
0 0 0 
 
0 -28 27 
0 0 0 
 
0 -28 -4 
0 0 0 
 
0 -28 -4 
4 0 0 
 
0 -28 -4 
2 0 0 
 
0 -28 -4 
0 0 0 
 
0 -28 -4 
0 3 0 
 
0 -28 -4 
0 -6 0 
 
0 -28 -4 
0 -21 0 
 
0 -28 -4 
0 -21 8 
 
0 -28 -4 
0 -21 -9 
 
0 -28 -4 
0 -21 -3 
 

*/
